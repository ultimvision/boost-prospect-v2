{
  "active": false,
  "connections": {
    "Receive Person Inputs - Subflow Trigger": {
      "main": [
        [
          {
            "node": "Workflow Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Configure Chat Model - Util OpenRouter": {
      "ai_languageModel": [
        [
          {
            "node": "Generate Connection Message - Util OpenRouter",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Get LinkedIn Profile Details - HTTP Apify": {
      "main": [
        [
          {
            "node": "If Profile Data Present - IF",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Apify Error 402 - IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Connection Message - Util OpenRouter": {
      "main": [
        [
          {
            "node": "If Connection Message Present - IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Configure Fallback Chat Model - Util OpenRouter": {
      "ai_languageModel": [
        [
          {
            "node": "Generate Connection Message - Util OpenRouter",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "If Connection Message Present - IF": {
      "main": [
        [
          {
            "node": "Update People Connection Message - AT People",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If Attempts lt 2 - IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Attempts lt 2 - IF": {
      "main": [
        [
          {
            "node": "Generate Connection Message - Util OpenRouter",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Fail Workflow - Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Profile Data Present - IF": {
      "main": [
        [
          {
            "node": "Generate Connection Message - Util OpenRouter",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation - Util",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Apify - Get limits": {
      "main": [
        [
          {
            "node": "Check Apify Capacity - IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Apify Capacity - IF": {
      "main": [
        [
          {
            "node": "Get LinkedIn Profile Details - HTTP Apify",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Apify Actors Config - Set": {
      "main": [
        [
          {
            "node": "Apify - Get limits",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Apify Actors Config - Set",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Apify Error 402 - IF": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stop and Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Workflow Data": {
      "main": [
        [
          {
            "node": "Apify Actors Config - Set",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-08-25T15:00:43.080Z",
  "id": "5e0tIRVmOZY0LlMF",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "[2040] Sub > Linkedin > Create Connection Message",
  "nodes": [
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        1184,
        816
      ],
      "id": "92f46e94-fcf5-4a2c-8c69-d5528e9b3250",
      "name": "Receive Person Inputs - Subflow Trigger",
      "notes": "PHASE: Input; Purpose: Receive person inputs for LinkedIn connection message generation in a subflow; Inputs: recId (Airtable People record ID) and linkedinLink from parent via passthrough; Outputs: Forwards the same payload unchanged to downstream nodes; Dependencies: Invoked as Execute Workflow Trigger by a parent workflow; Special Cases: linkedinLink must be a valid LinkedIn profile URL and recId must be present for later Airtable update."
    },
    {
      "parameters": {
        "model": "=google/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        2768,
        544
      ],
      "id": "cea1d504-ad77-4978-89d9-1dbeb5237089",
      "name": "Configure Chat Model - Util OpenRouter",
      "credentials": {
        "openRouterApi": {
          "id": "0qavXgV1FZOxQIaU",
          "name": "OpenRouter"
        }
      },
      "notes": "PHASE: Configuration; Purpose: Configure the primary OpenRouter chat model for downstream Chain LLM text generation; Inputs: None (static selection of google/gemini-2.5-flash); Outputs: Language model handle to be consumed by the Chain LLM; Dependencies: OpenRouter Boost Performance credential; Special Cases: Be mindful of rate limits and latency, a separate fallback model is connected for resilience."
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/apimaestro~linkedin-profile-detail/run-sync-get-dataset-items",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Workflow Data').item.json.config.vault.APIFY_TOKENS }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ { \"username\": $('Receive Person Inputs - Subflow Trigger').first().json.linkedinLink } }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2304,
        672
      ],
      "id": "282bd00c-7f91-4d7b-a3bb-1c4822bee850",
      "name": "Get LinkedIn Profile Details - HTTP Apify",
      "alwaysOutputData": true,
      "retryOnFail": false,
      "onError": "continueErrorOutput",
      "notes": "PHASE: Execution; Purpose: Retrieve LinkedIn profile details using Apify actor synchronous dataset endpoint; Inputs: linkedinLink from Start mapped as { username } in JSON body; Outputs: Array of dataset items with fields like basic_info for downstream LLM; Dependencies: HTTP Query Auth (Apify Boost Connect) and Apify run-sync-get-dataset-items endpoint; Special Cases: Possible empty or partial responses and rate limits, alwaysOutputData=true so handle empty arrays."
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=LinkedIn content:\n{{ $json.toJsonString() }}",
        "needsFallback": true,
        "messages": {
          "messageValues": [
            {
              "message": "=Role\nYou are a smart, efficient writing assistant.\n\nAction\nGenerate a very short, punchy connection‐request opener in {{ $('Workflow Data').item.json.config.variable.default_llm_output_language }} based on LinkedIn profile data.\n\nContext\nYou will receive a structured object (JSON or similar) containing a person’s LinkedIn fields (name, current title, past roles, interests, etc.). Your output will be used directly as the connection‐request message.\n\nRequirements\n\nUse this exact template:\n\n“Hello name, I really enjoyed seeing thingAboutThem. I’m growing my business and professional network, and I thought it would be great to connect.”\n\nthingAboutThem must come from your own analysis of their LinkedIn profile (e.g. role transitions, specific achievements, industries, interests, skills, or causes) and not from copying text verbatim. Always rephrase.\n\nEnsure thingAboutThem creates a direct, natural link to their experience, expertise, or interests (e.g. “your move from finance to AI,” “your work in renewable energy,” “your leadership in scaling startups”).\n\nSound human and spontaneous, not automated.\n\nKeep it under 25 words.\n\nAvoid vague filler (“passionate about…”)—be ultra-concise and specific.\n\nOutput only the one‐line English message, nothing else.\n"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        2752,
        320
      ],
      "id": "75b984b9-c0e3-46af-883d-80a539faadd1",
      "name": "Generate Connection Message - Util OpenRouter",
      "retryOnFail": true,
      "notes": "PHASE: Execution; Purpose: Generate a concise French LinkedIn connection message from profile data using OpenRouter LLMs; Inputs: Profile JSON (e.g., basic_info) from Apify HTTP node and two connected chat models (primary and fallback); Outputs: $json.text containing a single one-line FR message per the template; Dependencies: OpenRouter Boost Performance credential via connected model nodes; Special Cases: Keep under 25 words, avoid verbatim copying, output only the line, empty output triggers retry and eventual error."
    },
    {
      "parameters": {
        "model": "=openai/gpt-4.1-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        2896,
        544
      ],
      "id": "75856ad4-5887-476f-b773-e7640850cfa5",
      "name": "Configure Fallback Chat Model - Util OpenRouter",
      "credentials": {
        "openRouterApi": {
          "id": "0qavXgV1FZOxQIaU",
          "name": "OpenRouter"
        }
      },
      "notes": "PHASE: Configuration; Purpose: Configure fallback OpenRouter chat model for Chain LLM resilience; Inputs: None (static configuration); Outputs: Language model handle provided as secondary input to the Chain LLM; Dependencies: OpenRouter Boost Performance credential; Special Cases: Engages only when the primary model is unavailable or errors."
    },
    {
      "parameters": {
        "errorType": "errorObject",
        "errorObject": "={{ JSON.stringify($json) }}"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        3552,
        528
      ],
      "id": "6786ac68-c848-4b4c-a4a8-bf56f9c993fb",
      "name": "Fail Workflow - Error",
      "notes": "PHASE: Error Handling; Purpose: Fail the workflow when no valid connection message is produced after retries; Inputs: Current item JSON serialized into errorObject; Outputs: Throws an error and stops execution; Dependencies: None; Special Cases: Triggered from retry guard path only to avoid failing successful items."
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "def6644c-7b30-4c64-97cb-70dce510f2a1",
              "leftValue": "={{ $json.text }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "389e619d-3986-49ea-93dc-ecae24324c50",
              "leftValue": "={{ $json.text }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3104,
        352
      ],
      "id": "a6c881db-d243-4d17-89ce-21da2bfcb95a",
      "name": "If Connection Message Present - IF",
      "notes": "PHASE: Execution; Purpose: Route execution only if a valid message was generated; Inputs: $json.text from Chain LLM node; Outputs: True branch when text exists and is not empty, else False branch; Dependencies: True -> Airtable update, False -> retry guard; Special Cases: Protects against undefined and empty string outputs."
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "06b508ed-51fa-4bc9-960c-f8f86b9d3273",
              "leftValue": "={{ $runIndex }}",
              "rightValue": 2,
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3328,
        528
      ],
      "id": "939c5516-bd5a-4eab-915b-433e27b20da9",
      "name": "If Attempts lt 2 - IF",
      "notes": "PHASE: Execution; Purpose: Allow a single retry of message generation based on run index; Inputs: $runIndex (0-based) from the runtime; Outputs: True when $runIndex < 2 to permit retry, False to stop with error; Dependencies: True -> Chain LLM, False -> Fail Workflow; Special Cases: Tune the numeric threshold to modify allowed retries."
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a135385d-9f4a-45d4-86f5-45e980f3b48e",
              "leftValue": "={{ $json.basic_info }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "d8f99cae-aae3-444d-aed6-463758404f39",
              "leftValue": "={{ $json.basic_info }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2528,
        576
      ],
      "id": "7cfe683f-df26-4fa3-9cf2-b01ed2a278ad",
      "name": "If Profile Data Present - IF",
      "notes": "PHASE: Execution; Purpose: Ensure required profile data exists before prompting the LLM; Inputs: $json.basic_info from the Apify fetch; Outputs: True if object exists and is non-empty, False otherwise; Dependencies: True -> LLM generation, False -> No Operation; Special Cases: Guards against empty API responses and schema changes."
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2816,
        720
      ],
      "id": "8e3ebbab-4468-4076-9b87-3da42673ddc8",
      "name": "No Operation - Util",
      "notes": "PHASE: Utility; Purpose: Provide a clear no-op endpoint for the false branch when profile data is missing; Inputs: Item from IF false path; Outputs: Unmodified item or termination of branch; Dependencies: None; Special Cases: Serves documentation purposes only and can be removed without side effects."
    },
    {
      "parameters": {
        "content": "# LinkedIn Connection Message – Subflow\n\n1. This subworkflow generates a concise French LinkedIn connection message for a person and writes it back to Airtable.\n\n2. It receives **recId** and **linkedinLink** from a parent workflow, fetches profile details via **Apify**, and validates that required data is present.\n\n3. The workflow provisions **primary and fallback OpenRouter LLMs** to compose a single-line French opener under 25 words **without verbatim copying**.\n\n4. An **IF check ensures** a valid message is produced; a **guarded retry** allows one reattempt before failing the run.\n\n5. On success, the message is written to **People** in Airtable; otherwise, the flow terminates with no update.\n\n---\n\n### 🔗 Key Integrations\n- **Apify API**  \n- **OpenRouter** (LLMs with fallback)  \n- **Airtable API**\n",
        "height": 624,
        "width": 672
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        160,
        112
      ],
      "id": "2ecb33a2-dc4c-4ebd-b529-bc757a361f83",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "url": "=https://api.apify.com/v2/users/me/limits",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Workflow Data').item.json.config.vault.APIFY_TOKENS }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1856,
        752
      ],
      "id": "6e089dc6-f679-49fd-ba48-1c404610b22c",
      "name": "Apify - Get limits",
      "retryOnFail": true,
      "notes": "PHASE: Execution | Purpose: Start an Apify task run for the created task. | Inputs: task_id and Apify Bearer auth. | Outputs: Run metadata including run ID and status. | Dependencies: Apify API v2 /actor-tasks/{taskId}/runs. | Special Cases: Asynchronous start; handle pending states, retries, and timeouts."
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2f4064fa-089d-4c2e-91e8-f5d206f5e92c",
              "leftValue": "={{ $json.data.limits.maxConcurrentActorJobs }}",
              "rightValue": "={{ $json.data.current.activeActorJobCount }}",
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            },
            {
              "id": "18405df6-a422-4129-8fd0-818ecb853b18",
              "leftValue": "={{ $json.data.limits.maxActorMemoryGbytes }}",
              "rightValue": "={{ Math.ceil($json.data.current.actorMemoryGbytes + ($('Apify Actors Config - Set').item.json.options.memoryMbytes / 1000)) }}",
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2080,
        752
      ],
      "id": "4ba4a9cd-6d76-4c08-a318-597c9f7856cd",
      "name": "Check Apify Capacity - IF"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b132536b-98f5-4aa6-83f1-de045241ff94",
              "name": "options.memoryMbytes",
              "value": 128,
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1632,
        816
      ],
      "id": "7190eab5-42b1-40f2-b20d-251cd60f5934",
      "name": "Apify Actors Config - Set"
    },
    {
      "parameters": {
        "amount": "={{ Math.floor(Math.random() * (35 - 5 + 1)) + 5 }}"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2816,
        1056
      ],
      "id": "731b8255-6601-4f0d-a8f5-14468ef2c4f7",
      "name": "Wait",
      "webhookId": "555772e3-7ef8-4758-a09a-e4ea74fea801"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "52ecb72f-3a3e-429a-9a1c-def4089c2afc",
              "leftValue": "={{ $json.error.status }}",
              "rightValue": 402,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2528,
        960
      ],
      "id": "76d1b6ab-2eec-44c1-a9fb-0fc4ac7f109d",
      "name": "Apify Error 402 - IF"
    },
    {
      "parameters": {
        "errorMessage": "={{ $json.error }}"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        2816,
        1248
      ],
      "id": "e584b618-bfb6-4338-8ff7-2c981b96798a",
      "name": "Stop and Error"
    },
    {
      "parameters": {
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1408,
        816
      ],
      "id": "4a54d00e-895f-4617-a3af-9f4c0b0cc07c",
      "name": "Workflow Data"
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "=https://api.airtable.com/v0/{{ $('Workflow Data').first().json.config.vault.BASE_ID }}/People/{{ $('Workflow Data').first().json.recId }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Workflow Data').first().json.config.vault.AIRTABLE_PERSONAL_ACCESS_TOKEN }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ \n  JSON.stringify({\n    fields: {\n      connectionLinkedinMessage: $json.text\n    }\n  })\n}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3328,
        256
      ],
      "id": "f05a2a09-63ab-44ad-b212-0854fbf84c21",
      "name": "Update People Connection Message - AT People",
      "retryOnFail": true
    }
  ],
  "repo_name": "boost-prospect-v2",
  "repo_owner": "ultimvision",
  "repo_path": "workflows",
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "xqIMv4nOqM7qzjDi"
  },
  "shared": [
    {
      "createdAt": "2025-08-25T15:00:43.080Z",
      "updatedAt": "2025-08-25T15:00:43.080Z",
      "role": "workflow:owner",
      "workflowId": "5e0tIRVmOZY0LlMF",
      "projectId": "zxVtQj8AiJx7hlkL"
    }
  ],
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-09-05T11:43:12.743Z",
      "updatedAt": "2025-09-05T11:43:12.743Z",
      "id": "2WGDY3428pMfpzn6",
      "name": "Boost Prospect"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-09-05T12:16:12.221Z",
  "versionId": "bd0ebed0-5863-4d36-854c-521fdd377095"
}