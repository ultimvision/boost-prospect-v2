{
  "active": false,
  "connections": {
    "Get File": {
      "main": [
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If file too large": {
      "main": [
        [
          {
            "node": "Get File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Items": {
      "main": [
        [
          {
            "node": "isDiffOrNew",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "isDiffOrNew": {
      "main": [
        [
          {
            "node": "Create sub path",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Status": {
      "main": [
        [
          {
            "node": "Same file - Do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is different",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is new",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Same file - Do nothing": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is different": {
      "main": [
        [
          {
            "node": "Edit existing file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is new": {
      "main": [
        [
          {
            "node": "Create new file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit existing file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create sub path": {
      "main": [
        [
          {
            "node": "Check Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get file data": {
      "main": [
        [
          {
            "node": "If file too large",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Config": {
      "main": [
        [
          {
            "node": "Get file data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Items",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Start": {
      "main": [
        [
          {
            "node": "Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-08-26T10:57:36.252Z",
  "id": "kmmtHNbtwvX45UYe",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Backup > Commit Files to Github",
  "nodes": [
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8d513345-6484-431f-afb7-7cf045c90f4f",
              "name": "Done",
              "type": "boolean",
              "value": true
            }
          ]
        },
        "options": {}
      },
      "id": "24d9824d-6310-468b-92b2-85c338b4f702",
      "name": "Return",
      "type": "n8n-nodes-base.set",
      "position": [
        2608,
        48
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "url": "={{ $json.download_url }}",
        "options": {}
      },
      "id": "72bd627a-560f-4433-92b8-356164014992",
      "name": "Get File",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1040,
        -96
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "45ce825e-9fa6-430c-8931-9aaf22c42585",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              },
              "leftValue": "={{ $json.content }}",
              "rightValue": ""
            },
            {
              "id": "9619a55f-7fb1-4f24-b1a7-7aeb82365806",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              },
              "leftValue": "={{ $json.error }}",
              "rightValue": ""
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "708452dc-4855-4be0-8905-1c4727d90859",
      "name": "If file too large",
      "type": "n8n-nodes-base.if",
      "position": [
        816,
        -32
      ],
      "typeVersion": 2
    },
    {
      "parameters": {},
      "id": "be7d8584-5757-44fd-993e-64c7c2515214",
      "name": "Merge Items",
      "type": "n8n-nodes-base.merge",
      "position": [
        1264,
        48
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Decode base64 content and parse JSON\n  const origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64').toString());\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n// No file returned / new workflow\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = JSON.parse($input.all()[0].json.data);\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();\n"
      },
      "id": "ac659ef1-b40b-4934-ac5f-4ca55a5d9fff",
      "name": "isDiffOrNew",
      "type": "n8n-nodes-base.code",
      "position": [
        1488,
        48
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{$json.github_status}}",
        "rules": {
          "rules": [
            {
              "value2": "same"
            },
            {
              "value2": "different",
              "output": 1
            },
            {
              "value2": "new",
              "output": 2
            }
          ]
        }
      },
      "id": "a54e00e3-adb0-4a67-a6e1-8d806449b370",
      "name": "Check Status",
      "type": "n8n-nodes-base.switch",
      "position": [
        1936,
        16
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "72d6b630-eb32-4eff-b46e-345899d7147b",
      "name": "Same file - Do nothing",
      "type": "n8n-nodes-base.noOp",
      "position": [
        2384,
        -144
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "d59cd275-e0e9-4028-aa0f-291045b10ffd",
      "name": "File is different",
      "type": "n8n-nodes-base.noOp",
      "position": [
        2160,
        48
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "763e9042-4e7d-414d-b1ff-99279e7607a0",
      "name": "File is new",
      "type": "n8n-nodes-base.noOp",
      "position": [
        2160,
        240
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "file",
        "owner": {
          "__rl": true,
          "value": "={{ $('Config').item.json.repo_owner }}",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "={{ $('Config').item.json.repo_name }}",
          "mode": "name"
        },
        "filePath": "={{ $('Config').item.json.repo_path }}{{ $json.subPath }}{{$('Start').first().json.id}}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{$('Start').first().json.name}} ({{$json.github_status}})"
      },
      "id": "5a92e7e4-a9cf-4b4b-a365-3c08e32e2aea",
      "name": "Create new file",
      "type": "n8n-nodes-base.github",
      "position": [
        2384,
        240
      ],
      "typeVersion": 1,
      "webhookId": "4059b913-68af-444f-9e26-64bb77001338",
      "credentials": {
        "githubApi": {
          "id": "YXXomzx0R4s4cLH1",
          "name": "GitHub account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "edit",
        "owner": {
          "__rl": true,
          "value": "={{ $('Config').item.json.repo_owner }}",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "={{ $('Config').item.json.repo_name }}",
          "mode": "name"
        },
        "filePath": "={{ $('Config').item.json.repo_path }}{{ $json.subPath }}{{$('Start').first().json.id}}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{$('Start').first().json.name}} ({{$json.github_status}})"
      },
      "id": "dd361d9c-d843-4826-a160-1b51ce1bcecb",
      "name": "Edit existing file",
      "type": "n8n-nodes-base.github",
      "position": [
        2384,
        48
      ],
      "typeVersion": 1,
      "webhookId": "154306b9-babc-4d61-95d5-9963439fb466",
      "credentials": {
        "githubApi": {
          "id": "YXXomzx0R4s4cLH1",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "dae43d3b-56e5-4098-b602-862ebf5cd073",
              "name": "subPath",
              "type": "string",
              "value": "={{ $('Start').first().json.createdAt.split('-')[0] }}/{{ $('Start').first().json.createdAt.split('-')[1] }}/"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "3b54937b-8ab3-454c-96fe-d2deeef3b3ee",
      "name": "Create sub path",
      "type": "n8n-nodes-base.set",
      "position": [
        1712,
        48
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "={{ $('Config').item.json.repo_owner }}",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "={{ $('Config').item.json.repo_name }}",
          "mode": "name"
        },
        "filePath": "={{ $('Config').item.json.repo_path }}{{ $('Start').first().json.createdAt.split('-')[0] }}/{{ $('Start').first().json.createdAt.split('-')[1] }}/{{$json.id}}.json",
        "asBinaryProperty": false,
        "additionalParameters": {}
      },
      "id": "fdd7ed21-b5fd-475b-a7a6-c6fc10ca6d03",
      "name": "Get file data",
      "type": "n8n-nodes-base.github",
      "position": [
        592,
        -32
      ],
      "typeVersion": 1,
      "alwaysOutputData": true,
      "webhookId": "aa8168e6-2326-4dd2-9bb4-20bf3c62bea3",
      "credentials": {
        "githubApi": {
          "id": "YXXomzx0R4s4cLH1",
          "name": "GitHub account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8f6d1741-772f-462a-811f-4c334185e4f0",
              "name": "repo_owner",
              "type": "string",
              "value": "=ultimvision"
            },
            {
              "id": "8cac215c-4fd7-422f-9fd2-6b2d1e5e0383",
              "name": "repo_name",
              "type": "string",
              "value": "=boost-prospect-v2"
            },
            {
              "id": "eee305e9-4164-462a-86bd-80f0d58a31ae",
              "name": "repo_path",
              "type": "string",
              "value": "=workflows"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "db57cfa1-e60b-4a12-9e56-18785a29ac06",
      "name": "Config",
      "type": "n8n-nodes-base.set",
      "position": [
        368,
        48
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        144,
        48
      ],
      "id": "3cabecb2-8330-4e2c-9d94-664c72ca33e7",
      "name": "Start"
    }
  ],
  "repo_name": "boost-prospect-v2",
  "repo_owner": "ultimvision",
  "repo_path": "workflows",
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-08-26T10:57:36.252Z",
      "updatedAt": "2025-08-26T10:57:36.252Z",
      "role": "workflow:owner",
      "workflowId": "kmmtHNbtwvX45UYe",
      "projectId": "zxVtQj8AiJx7hlkL"
    }
  ],
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-08-26T11:02:08.861Z",
      "updatedAt": "2025-08-26T11:02:08.861Z",
      "id": "0xxjyvRYMMOqokEO",
      "name": "Github"
    },
    {
      "createdAt": "2025-08-26T11:02:05.599Z",
      "updatedAt": "2025-08-26T11:02:05.599Z",
      "id": "0Wtq811ACChNLFer",
      "name": "Backup"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-09-05T11:42:05.514Z",
  "versionId": "d0a307f3-6d28-4be2-bfd8-4c73155874dc"
}