{
  "active": false,
  "connections": {
    "Create Actor Task - Apify": {
      "main": [
        [
          {
            "node": "Prepare Task ID and Auth Header - Set",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Idempotency Key - Util": {
      "main": [
        [
          {
            "node": "Register Task Webhook - Apify",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Register Task Webhook - Apify": {
      "main": [
        [
          {
            "node": "Check Realtime Usage > Apify",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start Task Run - Apify": {
      "main": [
        [
          {
            "node": "Update ActorRunId - AT People",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Apify Error 402 - IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Task Suffix - Util": {
      "main": [
        [
          {
            "node": "Create Actor Task - Apify",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Task ID and Auth Header - Set": {
      "main": [
        [
          {
            "node": "Generate Idempotency Key - Util",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Apify - Get limits": {
      "main": [
        [
          {
            "node": "Check Apify Capacity - IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Apify - Get task": {
      "main": [
        [
          {
            "node": "Apify - Get limits",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Apify Capacity - IF": {
      "main": [
        [
          {
            "node": "Start Task Run - Apify",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create Run Apify Task - AT Apify Run",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Realtime Usage > Apify": {
      "main": [
        [
          {
            "node": "Apify - Get task",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Apify Error 402 - IF": {
      "main": [
        [
          {
            "node": "Create Run Apify Task - AT Apify Run_2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stop and Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Receive Apollo Lead Request - HTTP": {
      "main": [
        [
          {
            "node": "Workflow Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Workflow Data": {
      "main": [
        [
          {
            "node": "Check Website URL Present - IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Website URL Present - IF": {
      "main": [
        [
          {
            "node": "Variables - Set",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle Missing Prospecting URL - Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Variables - Set": {
      "main": [
        [
          {
            "node": "Generate Task Suffix - Util",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-08-25T15:12:50.254Z",
  "id": "rWX6BNJeZPsMWhGD",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "[2100] Apify > Create a Task > Web Scraping",
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.apify.com/v2/actor-tasks",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Workflow Data').first().json.config.vault.APIFY_TOKENS }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"actId\": \"{{ $('Variables - Set').first().json.actId }}\",\n  \"name\": \"{{ $json.unique_name }}-{{ DateTime.now().toFormat('yyyy-MM-dd-HH-mm') }}\",\n  \"options\": {\n    \"build\": \"version-0\",\n    \"timeoutSecs\": 360000,\n    \"memoryMbytes\": 8192\n  },\n  \"input\": {\n    \"aggressivePrune\": false,\n    \"blockMedia\": false,\n    \"clickElementsCssSelector\": \"[aria-expanded=\\\"false\\\"]\",\n    \"clientSideMinChangePercentage\": 15,\n    \"crawlerType\": \"playwright:adaptive\",\n    \"debugLog\": false,\n    \"debugMode\": false,\n    \"expandIframes\": true,\n    \"ignoreCanonicalUrl\": false,\n    \"ignoreHttpsErrors\": false,\n    \"keepUrlFragments\": false,\n    \"maxCrawlDepth\": {{ $('Variables - Set').first().json.maxCrawlDepth }},\n    \"maxCrawlPages\": {{ $('Variables - Set').first().json.maxCrawlPages }},\n    \"proxyConfiguration\": {\n      \"useApifyProxy\": true\n    },\n    \"readableTextCharThreshold\": 100,\n    \"removeCookieWarnings\": true,\n    \"removeElementsCssSelector\": \"nav, footer, script, style, noscript, svg, img[src^='data:'],\\n[role=\\\"alert\\\"],\\n[role=\\\"banner\\\"],\\n[role=\\\"dialog\\\"],\\n[role=\\\"alertdialog\\\"],\\n[role=\\\"region\\\"][aria-label*=\\\"skip\\\" i],\\n[aria-modal=\\\"true\\\"]\",\n    \"renderingTypeDetectionPercentage\": 10,\n    \"respectRobotsTxtFile\": true,\n    \"saveFiles\": false,\n    \"saveHtml\": false,\n    \"saveHtmlAsFile\": false,\n    \"saveMarkdown\": true,\n    \"saveScreenshots\": false,\n    \"startUrls\": [\n      {\n        \"url\": \"{{ $('Variables - Set').first().json.websiteUrl }}\",\n        \"method\": \"GET\"\n      }\n    ],\n    \"useSitemaps\": false,\n    \"includeUrlGlobs\": [],\n    \"excludeUrlGlobs\": [],\n    \"initialConcurrency\": 0,\n    \"maxConcurrency\": 200,\n    \"initialCookies\": [],\n    \"maxSessionRotations\": 10,\n    \"maxRequestRetries\": 3,\n    \"requestTimeoutSecs\": 60,\n    \"minFileDownloadSpeedKBps\": 128,\n    \"dynamicContentWaitSecs\": 10,\n    \"waitForSelector\": \"\",\n    \"softWaitForSelector\": \"\",\n    \"maxScrollHeightPixels\": 5000,\n    \"keepElementsCssSelector\": \"\",\n    \"htmlTransformer\": \"readableText\",\n    \"maxResults\": 9999999\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2304,
        -64
      ],
      "id": "36c7d1f7-8333-42d8-95b1-b103b4e82883",
      "name": "Create Actor Task - Apify",
      "retryOnFail": true,
      "notes": "PHASE: Utility | Purpose: Prepare task_id and Authorization header JSON template for Apify webhook registration. | Inputs: Apify response data.id and $vars.apify_webhook_bearer_token_callback. | Outputs: task_id field and payload_header string containing JSON headers. | Dependencies: Apify API response shape; n8n Variables. | Special Cases: Ensure bearer token exists and header JSON is valid; actorId and idempotencyKey are set elsewhere."
    },
    {
      "parameters": {
        "action": "generate",
        "dataPropertyName": "idempotencyKey",
        "encodingType": "hex",
        "stringLength": 8
      },
      "type": "n8n-nodes-base.crypto",
      "typeVersion": 1,
      "position": [
        -1856,
        -64
      ],
      "id": "fb4851ea-cfcd-4d58-a80a-8bd626c0ec78",
      "name": "Generate Idempotency Key - Util",
      "notes": "PHASE: Utility | Purpose: Generate a hex idempotency key to avoid duplicate webhook registrations. | Inputs: None. | Outputs: idempotencyKey as 8 hex characters (~4 bytes, ~32 bits). | Dependencies: n8n Crypto node. | Special Cases: Increase length for stronger dedup guarantees; regenerate on retry when Apify returns a 409."
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.apify.com/v2/webhooks",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Workflow Data').first().json.config.vault.APIFY_TOKENS }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"isAdHoc\": false,\n  \"eventTypes\": [\n    \"ACTOR.RUN.SUCCEEDED\",\n    \"ACTOR.RUN.FAILED\",\n    \"ACTOR.RUN.ABORTED\",\n    \"ACTOR.RUN.TIMED_OUT\"\n  ],\n  \"condition\": {\n    \"actorTaskId\": \"{{ $json.task_id }}\"\n  },\n  \"idempotencyKey\": \"{{ $json.idempotencyKey }}\",\n  \"ignoreSslErrors\": false,\n  \"doNotRetry\": false,\n  \"requestUrl\": \"{{ $('Workflow Data').first().json.config.variable.apify_web_scraping_webhook_callback }}\",\n  \"payloadTemplate\": \"{}\",\n  \"headersTemplate\": \"{{ $json.payload_header }}\",\n  \"description\": \"This is webhook callback for Apollo Website Scraper to N8N.\",\n  \"shouldInterpolateStrings\": false\n}",
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1632,
        -64
      ],
      "id": "1c621ecf-b979-4c86-85bb-97fbdcc7c439",
      "name": "Register Task Webhook - Apify",
      "retryOnFail": true,
      "notes": "PHASE: Execution | Purpose: Register a lifecycle webhook for the Apify task. | Inputs: task_id to bind, idempotencyKey for dedup, requestUrl from $vars.apify_apollo_webhook_callback, and headersTemplate from payload_header. | Outputs: Webhook registration metadata from Apify. | Dependencies: Apify API v2 /webhooks. | Special Cases: Ensure headersTemplate is valid JSON and handle 409 conflicts/retries."
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.apify.com/v2/actor-tasks/{{ $('Prepare Task ID and Auth Header - Set').item.json.task_id }}/runs",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Workflow Data').first().json.config.vault.APIFY_TOKENS }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -512,
        -160
      ],
      "id": "83f4e0d7-cfb9-4915-acbe-1a07270d0b06",
      "name": "Start Task Run - Apify",
      "retryOnFail": false,
      "onError": "continueErrorOutput",
      "notes": "PHASE: Execution | Purpose: Start an Apify task run for the created task. | Inputs: task_id and Apify Bearer auth. | Outputs: Run metadata including run ID and status. | Dependencies: Apify API v2 /actor-tasks/{taskId}/runs. | Special Cases: Asynchronous start; handle pending states, retries, and timeouts."
    },
    {
      "parameters": {
        "action": "generate",
        "dataPropertyName": "unique_name",
        "encodingType": "hex",
        "stringLength": 10
      },
      "type": "n8n-nodes-base.crypto",
      "typeVersion": 1,
      "position": [
        -2528,
        -64
      ],
      "id": "d31f89d5-90d1-4dde-b980-9c6fda44a71d",
      "name": "Generate Task Suffix - Util",
      "notes": "PHASE: Utility | Purpose: Generate a random hex suffix to append to the Apify task name for uniqueness. | Inputs: None. | Outputs: unique_name as 10 hex characters (~5 bytes, ~40 bits). | Dependencies: n8n Crypto node. | Special Cases: Increase length for stronger uniqueness; regenerate on retries if a name collision occurs."
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a222e988-efad-4f98-b868-eedd998eb466",
              "name": "payload_header",
              "value": "={\\n  \\\"Authorization\\\": \\\"Bearer {{ $('Workflow Data').first().json.config.variable.apify_webhook_bearer_token_callback }}\\\"\\n}",
              "type": "string"
            },
            {
              "id": "fd4ccf41-fad8-4e16-afdd-49122350eabd",
              "name": "task_id",
              "value": "={{ $json.data.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2080,
        -64
      ],
      "id": "bf78f20b-41a6-4d07-a2fc-1d73f3fdeb8a",
      "name": "Prepare Task ID and Auth Header - Set",
      "notes": "PHASE: Utility. Purpose: Prepare actorId, taskId, and the Authorization header template for Apify webhooks. Inputs: data.id and data.actId from the create-task response, idempotencyKey from crypto, and n8n_config.bearer_token_webhook. Outputs: actorId, taskId, idempotencyKey, payload_header stringified JSON. Dependencies: Apify response schema and configuration record. Special Cases: Guard against missing bearer token and ensure JSON formatting."
    },
    {
      "parameters": {
        "url": "=https://api.apify.com/v2/users/me/limits",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Workflow Data').first().json.config.vault.APIFY_TOKENS }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -960,
        -64
      ],
      "id": "a9ee16de-d1b8-4e52-aa48-66913f4fee7f",
      "name": "Apify - Get limits",
      "retryOnFail": true,
      "notes": "PHASE: Execution | Purpose: Start an Apify task run for the created task. | Inputs: task_id and Apify Bearer auth. | Outputs: Run metadata including run ID and status. | Dependencies: Apify API v2 /actor-tasks/{taskId}/runs. | Special Cases: Asynchronous start; handle pending states, retries, and timeouts."
    },
    {
      "parameters": {
        "url": "=https://api.apify.com/v2/actor-tasks/{{ $('Create Actor Task - Apify').item.json.data.id }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Workflow Data').first().json.config.vault.APIFY_TOKENS }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1184,
        -64
      ],
      "id": "9dcbecf7-3f40-4e7b-b4eb-9cc23a00ee6b",
      "name": "Apify - Get task",
      "retryOnFail": true,
      "notes": "PHASE: Execution | Purpose: Start an Apify task run for the created task. | Inputs: task_id and Apify Bearer auth. | Outputs: Run metadata including run ID and status. | Dependencies: Apify API v2 /actor-tasks/{taskId}/runs. | Special Cases: Asynchronous start; handle pending states, retries, and timeouts."
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2f4064fa-089d-4c2e-91e8-f5d206f5e92c",
              "leftValue": "={{ $json.data.limits.maxConcurrentActorJobs }}",
              "rightValue": "={{ $json.data.current.activeActorJobCount }}",
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            },
            {
              "id": "18405df6-a422-4129-8fd0-818ecb853b18",
              "leftValue": "={{ $json.data.limits.maxActorMemoryGbytes }}",
              "rightValue": "={{ Math.ceil($json.data.current.actorMemoryGbytes + ($('Apify - Get task').item.json.data.options.memoryMbytes / 1000)) }}",
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -736,
        -64
      ],
      "id": "e0059a1d-2698-48a7-ac8b-95530351d113",
      "name": "Check Apify Capacity - IF"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -1408,
        -64
      ],
      "id": "54947d96-46ef-42ca-a202-052fa950c26c",
      "name": "Check Realtime Usage > Apify"
    },
    {
      "parameters": {
        "errorMessage": "={{ $json.error }}"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        -64,
        32
      ],
      "id": "a269fed0-3c77-4e7e-88b8-6c54481c588d",
      "name": "Stop and Error"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "52ecb72f-3a3e-429a-9a1c-def4089c2afc",
              "leftValue": "={{ $json.error.status }}",
              "rightValue": 402,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -288,
        -64
      ],
      "id": "5990501a-54c9-48b2-8721-f07109e67649",
      "name": "Apify Error 402 - IF"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.airtable.com/v0/{{ $('Workflow Data').first().json.config.vault.BASE_ID }}/Apify%20Runs",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Workflow Data').first().json.config.vault.AIRTABLE_PERSONAL_ACCESS_TOKEN }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"records\": [\n    {\n      \"fields\": {\n        \"taskId\": \"{{ $('Create Actor Task - Apify').item.json.data.id }}\",\n        \"people\": [\"{{ $('Workflow Data').first().json.recId }}\"],\n        \"maxConcurrentActorJobs\": {{ $json.data.limits.maxConcurrentActorJobs }},\n        \"maxActorMemoryGbytes\": {{ $json.data.limits.maxActorMemoryGbytes }},\n        \"activeActorJobCount\": {{ $json.data.current.activeActorJobCount }},\n        \"actorMemoryGbytes\": {{ $json.data.current.actorMemoryGbytes }},\n        \"requestedMemoryMbytes\": {{ Math.ceil($json.data.current.actorMemoryGbytes + ($('Apify - Get task').item.json.data.options.memoryMbytes / 1000)) }}\n      }\n    }\n  ]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -512,
        32
      ],
      "id": "1ac5fe7e-329c-41b8-b729-e89cbc057da8",
      "name": "Create Run Apify Task - AT Apify Run"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.airtable.com/v0/{{ $('Workflow Data').first().json.config.vault.BASE_ID }}/Apify%20Runs",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Workflow Data').first().json.config.vault.AIRTABLE_PERSONAL_ACCESS_TOKEN }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"records\": [\n    {\n      \"fields\": {\n        \"taskId\": \"{{ $('Create Actor Task - Apify').item.json.data.id }}\",\n        \"people\": [\"{{ $('Workflow Data').first().json.recId }}\"],\n        \"maxConcurrentActorJobs\": {{ $json.data.limits.maxConcurrentActorJobs }},\n        \"maxActorMemoryGbytes\": {{ $json.data.limits.maxActorMemoryGbytes }},\n        \"activeActorJobCount\": {{ $json.data.current.activeActorJobCount }},\n        \"actorMemoryGbytes\": {{ $json.data.current.actorMemoryGbytes }},\n        \"requestedMemoryMbytes\": {{ Math.ceil($json.data.current.actorMemoryGbytes + ($('Apify - Get task').item.json.data.options.memoryMbytes / 1000)) }}\n      }\n    }\n  ]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -64,
        -160
      ],
      "id": "8c4d5d82-5527-4516-9cec-9d2fa170e988",
      "name": "Create Run Apify Task - AT Apify Run_2"
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -3424,
        32
      ],
      "id": "6a7a19a3-901a-42d8-bdfa-0d0176f72083",
      "name": "Receive Apollo Lead Request - HTTP"
    },
    {
      "parameters": {
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3200,
        32
      ],
      "id": "e999461d-ec6b-48b8-baef-d93bd333c808",
      "name": "Workflow Data"
    },
    {
      "parameters": {
        "errorMessage": "No Prospecting Url"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        -2752,
        128
      ],
      "id": "6c75a1d6-f734-4b67-9150-ca7db82e2ffc",
      "name": "Handle Missing Prospecting URL - Error",
      "notes": "PHASE: Error Handling | Purpose: Stop execution and raise an error when prospecting_url validation fails. | Inputs: Items from IF false branch (missing/empty prospecting_url). | Outputs: Error with message 'No Prospecting Url'. | Dependencies: n8n error handling and webhook response behavior. | Special Cases: Return 400 to caller to indicate invalid input."
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ac2d8168-9cfd-4e1a-a249-05040835c3fa",
              "leftValue": "={{ $json.website }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "9b9ce1fd-00fb-4919-bfec-cae41dcb24a0",
              "leftValue": "={{ $json.website }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2976,
        32
      ],
      "id": "2820c5b8-ca8f-4c9d-9dd0-313705c92d00",
      "name": "Check Website URL Present - IF",
      "notes": "PHASE: Configuration | Purpose: Branch execution based on whether prospecting_url is present and non-empty on the current item. | Inputs: Item from prior Set step populated from the webhook with prospecting_url. | Outputs: True branch when prospecting_url exists and notEmpty; False branch routes to the error handler. | Dependencies: Output of 'Variables - Set'. | Special Cases: Normalize/trim value; update rules if upstream schema or field name changes."
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e764c493-3b96-4b0b-abb4-18b3dade45d8",
              "name": "actId",
              "value": "aYG0l9s7dbB7j3gbS",
              "type": "string"
            },
            {
              "id": "174d0a57-7aa5-4e8b-a951-f2940513f45f",
              "name": "websiteUrl",
              "value": "={{ $json.website.startsWith('http://') ? $json.website.replace('http://', 'https://') : $json.website }}",
              "type": "string"
            },
            {
              "id": "7d8344cc-a962-4efc-939a-f143eee9c469",
              "name": "maxCrawlPages",
              "value": "15",
              "type": "string"
            },
            {
              "id": "52e9ae53-7f43-4a42-bebd-c8d6359bd507",
              "name": "maxCrawlDepth",
              "value": "3",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2752,
        -64
      ],
      "id": "d952c0ab-4c31-4e0c-829a-d7882657eb74",
      "name": "Variables - Set"
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "=https://api.airtable.com/v0/{{ $('Workflow Data').first().json.config.vault.BASE_ID }}/People/{{ $('Workflow Data').first().json.recId }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Workflow Data').first().json.config.vault.AIRTABLE_PERSONAL_ACCESS_TOKEN }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ \n  JSON.stringify({\n    fields: {\n      actorRunIdWebsiteScrapping: $json.data.id\n    }\n  })\n}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -288,
        -256
      ],
      "id": "699d4e6a-4d39-4bee-9c44-1a9683eb4cb9",
      "name": "Update ActorRunId - AT People",
      "retryOnFail": true
    }
  ],
  "repo_name": "boost-prospect-v2",
  "repo_owner": "ultimvision",
  "repo_path": "workflows",
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "xqIMv4nOqM7qzjDi"
  },
  "shared": [
    {
      "createdAt": "2025-08-25T15:12:50.254Z",
      "updatedAt": "2025-08-25T15:12:50.254Z",
      "role": "workflow:owner",
      "workflowId": "rWX6BNJeZPsMWhGD",
      "projectId": "zxVtQj8AiJx7hlkL"
    }
  ],
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-09-05T11:43:12.743Z",
      "updatedAt": "2025-09-05T11:43:12.743Z",
      "id": "2WGDY3428pMfpzn6",
      "name": "Boost Prospect"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-09-05T12:19:40.331Z",
  "versionId": "faa5115b-5a7d-4c9b-b474-e79d639b9f08"
}