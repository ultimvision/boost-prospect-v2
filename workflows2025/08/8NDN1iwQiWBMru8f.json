{
  "active": false,
  "connections": {
    "Variables - Set": {
      "main": [
        [
          {
            "node": "Search Active Url - AT Urls Scrapping",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Actor Task - Apify": {
      "main": [
        [
          {
            "node": "Prepare Task ID and Auth Header - Set",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Idempotency Key - Util": {
      "main": [
        [
          {
            "node": "Register Task Webhook - Apify",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Register Task Webhook - Apify": {
      "main": [
        [
          {
            "node": "Check Realtime Usage > Apify",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start Task Run - Apify": {
      "main": [
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Apify Error 402 - IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Task Suffix - Util": {
      "main": [
        [
          {
            "node": "Create Actor Task - Apify",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Task ID and Auth Header - Set": {
      "main": [
        [
          {
            "node": "Generate Idempotency Key - Util",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Apify - Get limits": {
      "main": [
        [
          {
            "node": "Check Apify Capacity - IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Apify - Get task": {
      "main": [
        [
          {
            "node": "Apify - Get limits",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Realtime Usage > Apify": {
      "main": [
        [
          {
            "node": "Apify - Get task",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Apify Capacity - IF": {
      "main": [
        [
          {
            "node": "Start Task Run - Apify",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create Run Apify Task - AT Apify Run2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Apify Error 402 - IF": {
      "main": [
        [
          {
            "node": "Create Run Apify Task - AT Apify Run_2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stop and Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Urls Exists - IF": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Active Url - AT Urls Scrapping": {
      "main": [
        [
          {
            "node": "Check Urls Exists - IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Generate Task Suffix - Util",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start": {
      "main": [
        [
          {
            "node": "Workflow Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Workflow Data": {
      "main": [
        [
          {
            "node": "Variables - Set",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-08-26T18:13:23.607Z",
  "id": "8NDN1iwQiWBMru8f",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "[2700] Apify > Create a Task > Facebook Groups Scraping",
  "nodes": [
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e764c493-3b96-4b0b-abb4-18b3dade45d8",
              "name": "actId",
              "value": "2chN8UQcH1CfxLRNE",
              "type": "string"
            },
            {
              "id": "174d0a57-7aa5-4e8b-a951-f2940513f45f",
              "name": "websiteUrl",
              "value": "={{ $json.website }}",
              "type": "string"
            },
            {
              "id": "7d8344cc-a962-4efc-939a-f143eee9c469",
              "name": "maxCrawlPages",
              "value": "15",
              "type": "string"
            },
            {
              "id": "52e9ae53-7f43-4a42-bebd-c8d6359bd507",
              "name": "maxCrawlDepth",
              "value": "3",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -7504,
        352
      ],
      "id": "3db9e805-3ba9-456e-89fe-f08396e5d127",
      "name": "Variables - Set"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.apify.com/v2/actor-tasks",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Workflow Data').first().json.config.vault.APIFY_TOKENS }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"actId\": \"{{ $('Variables - Set').first().json.actId }}\",\n  \"name\": \"{{ $json.unique_name }}-{{ DateTime.now().toFormat('yyyy-MM-dd-HH-mm') }}\",\n  \"options\": {\n    \"build\": \"latest\",\n    \"timeoutSecs\": 3600,\n    \"memoryMbytes\": 4096\n  },\n  \"input\": \n    {\n      \"onlyPostsNewerThan\": \"{{ $now.minus({ days: 1 }).format('yyyy-LL-dd') }}\",\n      \"resultsLimit\": 50,\n      \"startUrls\": {{ $json.startUrls.toJsonString() }},\n      \"viewOption\": \"CHRONOLOGICAL\"\n    }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -6384,
        256
      ],
      "id": "10b4ff98-f2e1-425a-a42d-84fe93142d5f",
      "name": "Create Actor Task - Apify",
      "retryOnFail": true,
      "notes": "PHASE: Utility | Purpose: Prepare task_id and Authorization header JSON template for Apify webhook registration. | Inputs: Apify response data.id and $vars.apify_webhook_bearer_token_callback. | Outputs: task_id field and payload_header string containing JSON headers. | Dependencies: Apify API response shape; n8n Variables. | Special Cases: Ensure bearer token exists and header JSON is valid; actorId and idempotencyKey are set elsewhere."
    },
    {
      "parameters": {
        "action": "generate",
        "dataPropertyName": "idempotencyKey",
        "encodingType": "hex",
        "stringLength": 8
      },
      "type": "n8n-nodes-base.crypto",
      "typeVersion": 1,
      "position": [
        -5936,
        256
      ],
      "id": "b7a06e17-3920-4624-8e53-686206a5041e",
      "name": "Generate Idempotency Key - Util",
      "notes": "PHASE: Utility | Purpose: Generate a hex idempotency key to avoid duplicate webhook registrations. | Inputs: None. | Outputs: idempotencyKey as 8 hex characters (~4 bytes, ~32 bits). | Dependencies: n8n Crypto node. | Special Cases: Increase length for stronger dedup guarantees; regenerate on retry when Apify returns a 409."
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.apify.com/v2/webhooks",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Workflow Data').first().json.config.vault.APIFY_TOKENS }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"isAdHoc\": false,\n  \"eventTypes\": [\n    \"ACTOR.RUN.SUCCEEDED\",\n    \"ACTOR.RUN.FAILED\",\n    \"ACTOR.RUN.ABORTED\",\n    \"ACTOR.RUN.TIMED_OUT\"\n  ],\n  \"condition\": {\n    \"actorTaskId\": \"{{ $json.task_id }}\"\n  },\n  \"idempotencyKey\": \"{{ $json.idempotencyKey }}\",\n  \"ignoreSslErrors\": false,\n  \"doNotRetry\": false,\n  \"requestUrl\": \"{{ $('Workflow Data').first().json.config.variable.apify_fb_group_scraping_webhook_callback }}\",\n  \"payloadTemplate\": \"{}\",\n  \"headersTemplate\": \"{{ $json.payload_header }}\",\n  \"description\": \"This is webhook callback for Facebook Group  Scraper to N8N.\",\n  \"shouldInterpolateStrings\": false\n}",
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -5712,
        256
      ],
      "id": "7d093989-101e-4df3-882f-4b02d99fcde6",
      "name": "Register Task Webhook - Apify",
      "retryOnFail": true,
      "notes": "PHASE: Execution | Purpose: Register a lifecycle webhook for the Apify task. | Inputs: task_id to bind, idempotencyKey for dedup, requestUrl from $vars.apify_apollo_webhook_callback, and headersTemplate from payload_header. | Outputs: Webhook registration metadata from Apify. | Dependencies: Apify API v2 /webhooks. | Special Cases: Ensure headersTemplate is valid JSON and handle 409 conflicts/retries."
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.apify.com/v2/actor-tasks/{{ $('Prepare Task ID and Auth Header - Set').item.json.task_id }}/runs",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Workflow Data').first().json.config.vault.APIFY_TOKENS }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -4592,
        160
      ],
      "id": "0eb648ab-cf5e-48b6-9f4a-9e63d8fe4657",
      "name": "Start Task Run - Apify",
      "retryOnFail": true,
      "onError": "continueErrorOutput",
      "notes": "PHASE: Execution | Purpose: Start an Apify task run for the created task. | Inputs: task_id and Apify Bearer auth. | Outputs: Run metadata including run ID and status. | Dependencies: Apify API v2 /actor-tasks/{taskId}/runs. | Special Cases: Asynchronous start; handle pending states, retries, and timeouts."
    },
    {
      "parameters": {
        "action": "generate",
        "dataPropertyName": "unique_name",
        "encodingType": "hex",
        "stringLength": 10
      },
      "type": "n8n-nodes-base.crypto",
      "typeVersion": 1,
      "position": [
        -6608,
        256
      ],
      "id": "5f0f58fa-2501-4186-b059-a2576aff5c92",
      "name": "Generate Task Suffix - Util",
      "notes": "PHASE: Utility | Purpose: Generate a random hex suffix to append to the Apify task name for uniqueness. | Inputs: None. | Outputs: unique_name as 10 hex characters (~5 bytes, ~40 bits). | Dependencies: n8n Crypto node. | Special Cases: Increase length for stronger uniqueness; regenerate on retries if a name collision occurs."
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a222e988-efad-4f98-b868-eedd998eb466",
              "name": "payload_header",
              "value": "={\\n  \\\"Authorization\\\": \\\"{{ $('Workflow Data').first().json.config.variable.apify_webhook_bearer_token_callback }}\\\"\\n}",
              "type": "string"
            },
            {
              "id": "fd4ccf41-fad8-4e16-afdd-49122350eabd",
              "name": "task_id",
              "value": "={{ $json.data.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -6160,
        256
      ],
      "id": "f34fa5aa-5f65-4536-8301-092f2d92c8c7",
      "name": "Prepare Task ID and Auth Header - Set",
      "notes": "PHASE: Utility. Purpose: Prepare actorId, taskId, and the Authorization header template for Apify webhooks. Inputs: data.id and data.actId from the create-task response, idempotencyKey from crypto, and n8n_config.bearer_token_webhook. Outputs: actorId, taskId, idempotencyKey, payload_header stringified JSON. Dependencies: Apify response schema and configuration record. Special Cases: Guard against missing bearer token and ensure JSON formatting."
    },
    {
      "parameters": {
        "url": "=https://api.apify.com/v2/users/me/limits",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Workflow Data').first().json.config.vault.APIFY_TOKENS }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -5040,
        256
      ],
      "id": "c68b8341-884e-4998-a1ec-6a1548fc9594",
      "name": "Apify - Get limits",
      "retryOnFail": true,
      "notes": "PHASE: Execution | Purpose: Start an Apify task run for the created task. | Inputs: task_id and Apify Bearer auth. | Outputs: Run metadata including run ID and status. | Dependencies: Apify API v2 /actor-tasks/{taskId}/runs. | Special Cases: Asynchronous start; handle pending states, retries, and timeouts."
    },
    {
      "parameters": {
        "url": "=https://api.apify.com/v2/actor-tasks/{{ $('Create Actor Task - Apify').item.json.data.id }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Workflow Data').first().json.config.vault.APIFY_TOKENS }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -5264,
        256
      ],
      "id": "14e233ab-f7ee-4434-978d-574aebcd086d",
      "name": "Apify - Get task",
      "retryOnFail": true,
      "notes": "PHASE: Execution | Purpose: Start an Apify task run for the created task. | Inputs: task_id and Apify Bearer auth. | Outputs: Run metadata including run ID and status. | Dependencies: Apify API v2 /actor-tasks/{taskId}/runs. | Special Cases: Asynchronous start; handle pending states, retries, and timeouts."
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -5488,
        256
      ],
      "id": "a931bf9d-0831-4ce4-846e-22de5a2e42f0",
      "name": "Check Realtime Usage > Apify"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2f4064fa-089d-4c2e-91e8-f5d206f5e92c",
              "leftValue": "={{ $json.data.limits.maxConcurrentActorJobs }}",
              "rightValue": "={{ $json.data.current.activeActorJobCount }}",
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            },
            {
              "id": "18405df6-a422-4129-8fd0-818ecb853b18",
              "leftValue": "={{ $json.data.limits.maxActorMemoryGbytes }}",
              "rightValue": "={{ Math.ceil($json.data.current.actorMemoryGbytes + ($('Apify - Get task').item.json.data.options.memoryMbytes / 1000)) }}",
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -4816,
        256
      ],
      "id": "3bcbfb05-97c1-443f-8f7c-df50ba3fffb5",
      "name": "Check Apify Capacity - IF"
    },
    {
      "parameters": {
        "errorMessage": "={{ $json.error.message }}"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        -4144,
        352
      ],
      "id": "0cba9d9a-4a3f-412a-acca-4b3bd1f52c8a",
      "name": "Stop and Error"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "52ecb72f-3a3e-429a-9a1c-def4089c2afc",
              "leftValue": "={{ $json.error.status }}",
              "rightValue": 402,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -4368,
        256
      ],
      "id": "f321d0da-f379-4091-973d-809babcda584",
      "name": "Apify Error 402 - IF"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "76f33ca2-02d2-4898-930b-e2d8b76eea87",
              "leftValue": "={{ $json.records }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -7056,
        352
      ],
      "id": "8770c20a-160d-4041-9667-97f37a6b1499",
      "name": "Check Urls Exists - IF"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -6832,
        448
      ],
      "id": "e797326a-52c6-4ecb-be78-dd2a6d96924b",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "url": "=https://api.airtable.com/v0/{{ $('Workflow Data').first().json.config.vault.BASE_ID }}/Urls%20Scraping",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "filterByFormula",
              "value": "={status} ='Active'"
            },
            {
              "name": "fields[]",
              "value": "url"
            },
            {
              "name": "sort[0][direction]",
              "value": "desc"
            },
            {
              "name": "sort[0][field]",
              "value": "name"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Workflow Data').first().json.config.vault.AIRTABLE_PERSONAL_ACCESS_TOKEN }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -7280,
        352
      ],
      "id": "532c07b6-f070-4e92-85c9-b8c8bb6168b3",
      "name": "Search Active Url - AT Urls Scrapping",
      "retryOnFail": true
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      startUrls: $input.all()\n        .flatMap(i => Array.isArray(i.json.records) ? i.json.records.map(r => r?.fields?.url) : i.json.startUrls || [])\n        .filter(Boolean)\n        .map(u => String(u).trim())\n        .filter(u => /^https?:\\/\\//i.test(u))\n        .filter((u, idx, arr) => arr.indexOf(u) === idx)\n        .map(url => ({ url, method: \"GET\" }))\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -6832,
        256
      ],
      "id": "a18fe0a4-8dc8-4897-ba09-d6ea4a3075e7",
      "name": "Code"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.airtable.com/v0/{{ $('Workflow Data').first().json.config.vault.BASE_ID }}/Apify%20Runs",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Workflow Data').first().json.config.vault.AIRTABLE_PERSONAL_ACCESS_TOKEN }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"records\": [\n    {\n      \"fields\": {\n        \"taskId\": \"{{ $('Create Actor Task - Apify').item.json.data.id }}\",\n        \"maxConcurrentActorJobs\": {{ $json.data.limits.maxConcurrentActorJobs }},\n        \"maxActorMemoryGbytes\": {{ $json.data.limits.maxActorMemoryGbytes }},\n        \"activeActorJobCount\": {{ $json.data.current.activeActorJobCount }},\n        \"actorMemoryGbytes\": {{ $json.data.current.actorMemoryGbytes }},\n        \"requestedMemoryMbytes\": {{ Math.ceil($json.data.current.actorMemoryGbytes + ($('Apify - Get task').item.json.data.options.memoryMbytes / 1000)) }}\n      }\n    }\n  ]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -4144,
        160
      ],
      "id": "596e19cd-6228-4ccf-be7d-95de4c5a944b",
      "name": "Create Run Apify Task - AT Apify Run_2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.airtable.com/v0/{{ $('Workflow Data').first().json.config.vault.BASE_ID }}/Apify%20Runs",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Workflow Data').first().json.config.vault.AIRTABLE_PERSONAL_ACCESS_TOKEN }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"records\": [\n    {\n      \"fields\": {\n        \"taskId\": \"{{ $('Create Actor Task - Apify').item.json.data.id }}\",\n        \"maxConcurrentActorJobs\": {{ $json.data.limits.maxConcurrentActorJobs }},\n        \"maxActorMemoryGbytes\": {{ $json.data.limits.maxActorMemoryGbytes }},\n        \"activeActorJobCount\": {{ $json.data.current.activeActorJobCount }},\n        \"actorMemoryGbytes\": {{ $json.data.current.actorMemoryGbytes }},\n        \"requestedMemoryMbytes\": {{ Math.ceil($json.data.current.actorMemoryGbytes + ($('Apify - Get task').item.json.data.options.memoryMbytes / 1000)) }}\n      }\n    }\n  ]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -4592,
        352
      ],
      "id": "01b8c0d9-7895-46c1-b473-a5a62266141f",
      "name": "Create Run Apify Task - AT Apify Run2"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -4368,
        64
      ],
      "id": "06db0022-c5a9-4b67-80b2-4652edf5ac78",
      "name": "No Operation, do nothing1"
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -7952,
        352
      ],
      "id": "cb2fe322-e694-4de8-9408-8861bb7e91dc",
      "name": "Start"
    },
    {
      "parameters": {
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -7728,
        352
      ],
      "id": "1f22945d-9466-42f8-aa7a-27bec3d3a73d",
      "name": "Workflow Data"
    }
  ],
  "repo_name": "boost-prospect-v2",
  "repo_owner": "ultimvision",
  "repo_path": "workflows",
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "xqIMv4nOqM7qzjDi"
  },
  "shared": [
    {
      "createdAt": "2025-08-26T18:13:23.607Z",
      "updatedAt": "2025-08-26T18:13:23.607Z",
      "role": "workflow:owner",
      "workflowId": "8NDN1iwQiWBMru8f",
      "projectId": "zxVtQj8AiJx7hlkL"
    }
  ],
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-09-05T11:43:12.743Z",
      "updatedAt": "2025-09-05T11:43:12.743Z",
      "id": "2WGDY3428pMfpzn6",
      "name": "Boost Prospect"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-09-07T17:03:40.373Z",
  "versionId": "90dc69bd-1db4-49fe-8df2-5756b2a01387"
}