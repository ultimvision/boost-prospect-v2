{
  "active": false,
  "connections": {
    "Get Actor Run Details - Apify Apollo": {
      "main": [
        [
          {
            "node": "If Run SUCCEEDED - IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Dataset Items - Apify Apollo": {
      "main": [
        [
          {
            "node": "Check Website Content Exists - IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Run SUCCEEDED - IF": {
      "main": [
        [
          {
            "node": "List Dataset Items - Apify Apollo",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Fail Run - Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Website Content - SET": {
      "main": [
        [
          {
            "node": "Loop Over Pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Summarize Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat Model - OpenRouter": {
      "ai_languageModel": [
        [
          {
            "node": "Analyse Page Content",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Chat Model - OpenRouter - Fallback": {
      "ai_languageModel": [
        [
          {
            "node": "Analyse Page Content",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "Loop Over Pages": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Analyse Page Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Summarize Content",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Summarize Content",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "Analyse Page Content": {
      "main": [
        [
          {
            "node": "Loop Over Pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summarize Content": {
      "main": [
        [
          {
            "node": "Update Website Content - AT People",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Website Content Exists - IF": {
      "main": [
        [
          {
            "node": "Prepare Website Content - SET",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set Website Processed - Set",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Workflow Data": {
      "main": [
        [
          {
            "node": "Get Webhook Dispatch - HTTP Apify",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start": {
      "main": [
        [
          {
            "node": "Workflow Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Webhook Dispatch - HTTP Apify": {
      "main": [
        [
          {
            "node": "Search Actor Run ID - AT People",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Actor Run ID - AT People": {
      "main": [
        [
          {
            "node": "Get Actor Run Details - Apify Apollo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-08-25T14:18:20.898Z",
  "id": "H0CalwqpEMEd9LsQ",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "[2110] Apify > Webhook Callback > Web Scraping",
  "nodes": [
    {
      "parameters": {
        "url": "=https://api.apify.com/v2/actor-runs/{{ $('Get Webhook Dispatch - HTTP Apify').item.json.data.eventData.actorRunId }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1488,
        400
      ],
      "id": "4b2cc3b2-cb2b-4fc4-a79d-a4938c67e21e",
      "name": "Get Actor Run Details - Apify Apollo",
      "retryOnFail": true,
      "maxTries": 2,
      "credentials": {
        "httpBearerAuth": {
          "id": "c5ccYKuRoY4O10nO",
          "name": "Bearer Apify"
        }
      },
      "notes": "PHASE: Execution Purpose: Fetch Apify actor run details to determine completion status and get the dataset id. Inputs: actorRunId from Get Webhook Dispatch. Outputs: JSON with data.status and data.defaultDatasetId. Dependencies: Apify HTTP API; Bearer Apify credential. Special Cases: Status may be SUCCEEDED/FAILED/TIMED-OUT; gate downstream actions accordingly."
    },
    {
      "parameters": {
        "url": "=https://api.apify.com/v2/datasets/{{ $json.data.defaultDatasetId }}/items",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "format",
              "value": "json"
            },
            {
              "name": "limit",
              "value": "100"
            },
            {
              "name": "offset",
              "value": "=0"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1040,
        256
      ],
      "id": "2b856d18-b1e4-4342-85f8-d112f9832c3b",
      "name": "List Dataset Items - Apify Apollo",
      "retryOnFail": true,
      "maxTries": 2,
      "alwaysOutputData": true,
      "credentials": {
        "httpBearerAuth": {
          "id": "c5ccYKuRoY4O10nO",
          "name": "Bearer Apify"
        }
      },
      "notes": "PHASE: Execution Purpose: List items from the Apify dataset produced by the actor run using pagination. Inputs: dataset id and offset from subflow inputs; limit=100. Outputs: Array of dataset items. Dependencies: Apify HTTP API; Bearer Apify credential. Special Cases: Empty result indicates no more pages; handle 429 rate limits."
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e09c97a6-ae38-43d5-a296-5a5f501d454c",
              "leftValue": "={{ $json.data.status }}",
              "rightValue": "SUCCEEDED",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1264,
        400
      ],
      "id": "7691f931-18ee-405b-b394-b0ed6eedd72b",
      "name": "If Run SUCCEEDED - IF",
      "notes": "PHASE: Execution Purpose: Branch based on Apify actor run status being SUCCEEDED. Inputs: data.status from Get Actor Run Details. Outputs: True path triggers pagination; false path goes to Stop with Error. Dependencies: Get Actor Run Details. Special Cases: Non-SUCCEEDED statuses are treated as failures."
    },
    {
      "parameters": {
        "errorMessage": "Apollo Run Status Error"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        -1040,
        448
      ],
      "id": "eefb5f9e-50fe-45e3-bc41-7887455f0a59",
      "name": "Fail Run - Error Handler",
      "notes": "PHASE: Error Handling Purpose: Fail the workflow when the Apify actor run did not succeed. Inputs: False branch from If Run SUCCEEDED. Outputs: Error thrown with message 'Apollo Run Status Error'. Dependencies: If Run SUCCEEDED - IF. Special Cases: Stops all downstream processing."
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "bad7954c-5368-4466-9d1f-43b9d425e729",
              "name": "text",
              "value": "={{ $json.text }}",
              "type": "string"
            },
            {
              "id": "33ddf451-41d8-4163-9dca-6cbdf02a2145",
              "name": "title",
              "value": "={{ $json.metadata.title }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -592,
        64
      ],
      "id": "7dd39e02-6689-4a64-9403-b6cdab69f207",
      "name": "Prepare Website Content - SET"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -80,
        0
      ],
      "id": "d9d9a072-1848-4af0-9c6e-f5c21bb2565a",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "model": "=google/gemini-2.5-flash",
        "options": {
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        -144,
        528
      ],
      "id": "ae575c8d-1aed-47ef-91d5-2ab491bda6e9",
      "name": "Chat Model - OpenRouter",
      "credentials": {
        "openRouterApi": {
          "id": "0qavXgV1FZOxQIaU",
          "name": "OpenRouter"
        }
      }
    },
    {
      "parameters": {
        "model": "=openai/gpt-4.1-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        -16,
        528
      ],
      "id": "e09cb649-7790-4c8f-a153-875821fd2632",
      "name": "Chat Model - OpenRouter - Fallback",
      "credentials": {
        "openRouterApi": {
          "id": "0qavXgV1FZOxQIaU",
          "name": "OpenRouter"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -368,
        64
      ],
      "id": "2358d3eb-66da-415f-a1e1-61cf3050edce",
      "name": "Loop Over Pages"
    },
    {
      "parameters": {
        "model": "=openai/gpt-5-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        224,
        224
      ],
      "id": "e0a59ac5-fb3b-490e-ac1c-b01db305ca58",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "0qavXgV1FZOxQIaU",
          "name": "OpenRouter"
        }
      }
    },
    {
      "parameters": {
        "model": "=google/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        352,
        224
      ],
      "id": "4cd87e64-dba5-4f1a-9729-b581c514e439",
      "name": "OpenRouter Chat Model1",
      "credentials": {
        "openRouterApi": {
          "id": "0qavXgV1FZOxQIaU",
          "name": "OpenRouter"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Title :  {{ $json.title }}\n\nContent :\n{{ $json.text }}",
        "needsFallback": true,
        "messages": {
          "messageValues": [
            {
              "message": "=## 🔹 Prompt (English)\n\n**Role**\nYou are a precise and detail-oriented writing assistant.\n\n**Action**\nSummarize the full content of one web page (title + text) into a single coherent summary of around **150 words**, keeping all essential information.\n\n**Requirements**\n\n* Length: \\~150 words (±10%).\n* Preserve **all important elements** (main ideas, arguments, data, examples, quotes, calls-to-action, conclusions).\n* Write in **clear, fluent English**, using complete sentences and smooth transitions.\n* Do not copy text verbatim — always rephrase.\n* The summary should be **comprehensive but concise**: nothing important is omitted, nothing unnecessary is included.\n* Maintain the **tone and intent** of the original page (informative, persuasive, analytical, etc.).\n* Structure the text as a flowing **narrative paragraph** (not bullet points), unless the source uses lists that must be reflected.\n\n**Input format**\nYou will receive:\n\n* **Page Title**\n* **Full Page Content (text)**\n\n**Output format**\nA single **\\~300-word summary** that accurately reflects the full content of the page."
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        -144,
        304
      ],
      "id": "2eed2f9c-1cef-4025-a698-17a12e9240f4",
      "name": "Analyse Page Content",
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Website Content :\n{{ $json.data.toJsonString() }}",
        "needsFallback": true,
        "messages": {
          "messageValues": [
            {
              "message": "=## 🔹 Prompt – Website Analysis\n\n**Role**\nYou are a strategic business analyst specialized in decoding websites to identify what type of company they belong to and how they operate.\n\n**Action**\nAnalyze the full content of a website (title, text, navigation, products/services, calls to action, etc.) and produce a structured report.\n\n**Requirements**\nFollow this exact structure in your output:\n\n1. **Who (Company Identity)**\n\n   * Type of company or organization\n   * Sector/industry\n   * Mission, values, positioning\n   * Tone of communication (formal, casual, expert, etc.)\n\n2. **What (Products / Services)**\n\n   * Main products or services offered\n   * Unique value proposition (USP)\n   * Positioning (premium, accessible, niche, etc.)\n\n3. **Who for (Target Personas)**\n\n   * Intended audience(s)\n   * Needs, problems, or pain points addressed\n   * Level of expertise expected (general public, professionals, executives, etc.)\n\n4. **Where (Markets & Geography)**\n\n   * Regions or countries targeted\n   * Industries or segments served\n   * Languages and scope (local, national, international)\n\n5. **When (Temporal Context)**\n\n   * Current initiatives, events, or product launches\n   * Evidence of maturity (startup vs established company)\n   * Time-sensitive promotions or updates (if any)\n\n6. **How (Strategy & Approach)**\n\n   * Communication style and persuasion methods\n   * Proofs of credibility (testimonials, certifications, partners)\n   * Conversion strategy (calls-to-action, funnels, user journey)\n\n**General Instructions**\n\n* Cover *all* important elements — do not omit anything relevant.\n* Always rephrase; do not copy text verbatim.\n* Keep the report clear, professional, and easy to scan.\n* The final output need to be writed in {{ $('Workflow Data').item.json.config.variable.default_llm_output_language }}."
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        208,
        0
      ],
      "id": "45dd2147-5467-4ea7-8f18-582d872fecac",
      "name": "Summarize Content",
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "9d06b21e-5665-4277-aafb-89404291ad47",
              "leftValue": "={{ $json.text }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "b16b924b-58c6-44ca-b413-108efe0eab95",
              "leftValue": "={{ $json.text }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -816,
        256
      ],
      "id": "d5a84a72-e48f-4524-a738-30c783a59347",
      "name": "Check Website Content Exists - IF"
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -2384,
        400
      ],
      "id": "b9227001-6675-4784-92d5-3aadcf5747d3",
      "name": "Start"
    },
    {
      "parameters": {
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2160,
        400
      ],
      "id": "59e86816-2bc5-42e2-a11c-0019142347ed",
      "name": "Workflow Data"
    },
    {
      "parameters": {
        "url": "=https://api.apify.com/v2/webhook-dispatches/{{ $json['x-apify-webhook-dispatch-id'] }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Workflow Data').item.json.config.vault.APIFY_TOKENS }}"
            },
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1936,
        400
      ],
      "id": "9dc8551d-ddee-41c5-a565-b0fe17ad987b",
      "name": "Get Webhook Dispatch - HTTP Apify",
      "notes": "PHASE: Execution Purpose: Retrieve the Apify webhook dispatch to extract actorRunId and metadata for this callback. Inputs: Header x-apify-webhook-dispatch-id from Webhook; Apify Bearer credential. Outputs: JSON dispatch including data.eventData.actorRunId and metadata. Dependencies: Webhook - Apify Callback - Apollo; Apify HTTP API; Bearer Apify credential. Special Cases: 401/403 for auth errors; 429 for rate limits; no retry configured."
    },
    {
      "parameters": {
        "url": "=https://api.airtable.com/v0/{{ $('Workflow Data').item.json.config.vault.BASE_ID }}/People",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "filterByFormula",
              "value": "={actorRunIdWebsiteScrapping}=\"{{ $json.data.eventData.actorRunId }}\""
            },
            {
              "name": "maxRecords",
              "value": "1"
            },
            {
              "name": "fields[0]",
              "value": "recId"
            },
            {
              "name": "fields[1]",
              "value": "user"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Workflow Data').item.json.config.vault.AIRTABLE_PERSONAL_ACCESS_TOKEN }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1712,
        400
      ],
      "id": "76cecabb-2599-495e-bb39-e8363f8e6cda",
      "name": "Search Actor Run ID - AT People",
      "retryOnFail": true
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "=https://api.airtable.com/v0/{{ $('Workflow Data').first().json.config.vault.BASE_ID }}/People/{{ $('Search Actor Run ID - AT People').item.json.records[0].fields.recId }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Workflow Data').first().json.config.vault.AIRTABLE_PERSONAL_ACCESS_TOKEN }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"fields\": {\n    \"companyWebsiteScrappingProcessed\": true\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -592,
        256
      ],
      "id": "d9b6e377-67b2-4014-898e-001d2443a6c8",
      "name": "Set Website Processed - Set",
      "retryOnFail": true
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "=https://api.airtable.com/v0/{{ $('Workflow Data').first().json.config.vault.BASE_ID }}/People/{{ $('Search Actor Run ID - AT People').item.json.records[0].fields.recId }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Workflow Data').first().json.config.vault.AIRTABLE_PERSONAL_ACCESS_TOKEN }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ \n  JSON.stringify({\n    fields: {\n      websiteContentSummary: $json.text,\n      websiteContent: JSON.stringify($('Aggregate').first().json.data),\n      companyWebsiteScrappingProcessed: true\n    }\n  })\n}}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        560,
        0
      ],
      "id": "9f97d9f5-8704-423c-ae2e-819478452853",
      "name": "Update Website Content - AT People",
      "retryOnFail": true
    }
  ],
  "repo_name": "boost-prospect-v2",
  "repo_owner": "ultimvision",
  "repo_path": "workflows",
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "xqIMv4nOqM7qzjDi"
  },
  "shared": [
    {
      "createdAt": "2025-08-25T14:18:20.898Z",
      "updatedAt": "2025-08-25T14:18:20.898Z",
      "role": "workflow:owner",
      "workflowId": "H0CalwqpEMEd9LsQ",
      "projectId": "zxVtQj8AiJx7hlkL"
    }
  ],
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-09-05T11:43:12.743Z",
      "updatedAt": "2025-09-05T11:43:12.743Z",
      "id": "2WGDY3428pMfpzn6",
      "name": "Boost Prospect"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-09-05T12:21:43.932Z",
  "versionId": "44b69edd-dc13-4f84-a589-a2c820cd9312"
}